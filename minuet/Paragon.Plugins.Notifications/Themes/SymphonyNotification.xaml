<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:Paragon.Plugins.Notifications.Converters"
                    xmlns:controls="clr-namespace:Paragon.Plugins.Notifications.Controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Paragon.Plugins.Notifications;component/Themes/CloseButton.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <BrushConverter x:Key="BrushConverter" />
    <converters:MouseOutSolidBrushConverter x:Key="MouseOutSolidBrushConverter" />
    <converters:IsIconVisibleConverter x:Key="IsIconVisibleConverter" />
    <converters:PositionLeftOrRightConverter x:Key="PositionLeftOrRightConverter" />

    <Style x:Key="MessageStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="Calibri" />
        <Setter Property="MaxHeight" Value="60" />
        <Setter Property="Margin" Value="2,2,4,4" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>

    <Style x:Key="TitleStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="MaxHeight" Value="30" />
        <Setter Property="Margin" Value="0,4,4,2" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="ImageStyle" TargetType="Image">
        <Setter Property="MaxWidth" Value="30" />
        <Setter Property="Margin" Value="0,0,4,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="NotificationStyle" TargetType="Button">
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Storyboard x:Key="HideToastRightAnimation">
        <DoubleAnimation 
            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)"
            To="400" 
            Duration="0:0:0.200" />
    </Storyboard>

    <Storyboard x:Key="HideToastLeftAnimation">
        <DoubleAnimation 
            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)"
            To="-400" 
            Duration="0:0:0.200" />
    </Storyboard>

    <Style TargetType="controls:Notification">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:Notification">
                    <Grid Margin="0">
                        <Button Command="{TemplateBinding Command}" Background="{TemplateBinding Background}" Style="{StaticResource NotificationStyle}">
                            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <DockPanel Margin="4">
                                    <DockPanel DockPanel.Dock="Top">
                                        <Image DockPanel.Dock="Left" 
                                            Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconUrl, TargetNullValue={x:Null}}" 
                                            Visibility="{Binding Path=IconUrl, Converter={StaticResource IsIconVisibleConverter}}"
                                            Style="{StaticResource ImageStyle}" />

                                        <TextBlock Text="{TemplateBinding Title}" Style="{StaticResource TitleStyle}" />
                                    </DockPanel>
                                    <DockPanel DockPanel.Dock="Bottom">
                                        <TextBlock DockPanel.Dock="Bottom" Text="{TemplateBinding Message}" Style="{StaticResource MessageStyle}" />
                                    </DockPanel>
                                </DockPanel>
                            </Grid>
                        </Button>
                        <Button Command="{TemplateBinding CloseCommand}"
                                Width="16" Height="16" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,10,12,0" Focusable="False" 
                                Style="{StaticResource CloseButtonStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsRemoving}" Value="True" />
                    <Condition Binding="{Binding Path=Position, Converter={StaticResource PositionLeftOrRightConverter}}" Value="Left" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HideToastLeftAnimation}" />
                </MultiDataTrigger.EnterActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsRemoving}" Value="True" />
                    <Condition Binding="{Binding Path=Position, Converter={StaticResource PositionLeftOrRightConverter}}" Value="Right" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HideToastRightAnimation}" />
                </MultiDataTrigger.EnterActions>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>